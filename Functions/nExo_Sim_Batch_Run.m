function [res,Texo,TID,MusclePower,lMtilde,MActivation,lTtilde,energy_total,ResT,PowerExo,output,ExoPosWork,ExoNetWork] = nExo_Sim_Batch_Run(setup,DatStore)
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here

clear Cont_nExoADiGatorGrd Cont_nExoADiGatorHes Cont_nExo
auxdata=setup.auxdata;

% solve optimal control problem
output = gpops2(setup);

res=output.result.solution.phase(1);
Time=res.time;
MActivation=res.state(:,1:auxdata.NMuscles);
TForcetilde=res.state(:,auxdata.NMuscles+1:auxdata.NMuscles*2);
TForce=TForcetilde.*(ones(size(Time))*DatStore.Fiso);
vA=100*res.control(:,1:auxdata.NMuscles);
MExcitation=computeExcitationRaasch(MActivation,vA, auxdata.tauDeact, auxdata.tauAct);
RActivation=res.control(:,auxdata.NMuscles+1:auxdata.NMuscles+auxdata.Ndof);
MuscleNames=DatStore.MuscleNames;
OptInfo=output;
nColl=length(Time);
TForce_dottilde=10*res.control(:,auxdata.NMuscles+auxdata.Ndof+1:auxdata.NMuscles*2+auxdata.Ndof);

% Muscle fiber length from Ftilde
% Interpolation lMT
lMTinterp=zeros(length(Time),auxdata.NMuscles);
VMTinterp=zeros(length(Time),auxdata.NMuscles);
for m=1:auxdata.NMuscles
    [lMTinterp(:,m),VMTinterp(:,m),~] = SplineEval_ppuval(auxdata.LMTSpline(m),Time,1);
end
% [lM,lMtilde,lTtilde] = FiberLength_Ftilde(TForcetilde,auxdata.params,lMTinterp,auxdata.ATendon);
% Atendon = ones(nColl,1)*auxdata.ATendon;
% bool_LinearSpring = 1;
% [lM,lMtilde,vM,vMtilde,lTtilde] = FiberVelocity_Ftilde(TForcetilde,TForce_dottilde,auxdata.params,lMTinterp,VMTinterp,Atendon,bool_LinearSpring);


% compute metabolic energy
a=MActivation;
Ftilde=TForcetilde;
dFtilde = TForce_dottilde;
tension = ones(nColl,1)*auxdata.tension;
ATendon = auxdata.ATendon;
[Hilldiff,F, Fce, Fiso, vMmax, massM, vM , lMo,FMltilde,lMtilde,lTtilde] = ForceEquilibrium_FtildeState_all_LinTS(a,Ftilde,dFtilde,...
    lMTinterp,VMTinterp,auxdata.params,auxdata.Fvparam,auxdata.Fpparam,auxdata.Faparam,tension,ATendon);


%% Plot results exo actuation
%

uExo = res.control(:,end-auxdata.nExo+1:end);
Texo = zeros(nColl,auxdata.nExo);
for i=1:auxdata.nExo
    Texo(:,i) = auxdata.Texo(i) .* uExo(:,i);
end

% plot part of ID torque generated by exo
TID=zeros(length(res.time),auxdata.Ndof);
for i=1:auxdata.Ndof;
    TID(:,i)=ppval(auxdata.JointIDSpline(i),res.time);
end

% if percentage ID torque is used as well, add this
Ndof=auxdata.Ndof;
for dof = 1:Ndof    
    if any(dof == auxdata.IndExo)
        iExo = dof == auxdata.IndExo;
        T_Exo_IDc=TID(:,dof).*auxdata.ID_rel(iExo);
        Texo(:,iExo) = Texo(:,iExo) + T_Exo_IDc;
    end
end

% compute exo power
q=zeros(length(res.time),length(auxdata.JointIKSpline)); qdot=q;
for i=1:length(auxdata.JointIKSpline)
    [q(:,i),qdot(:,i),~] = SplineEval_ppuval(auxdata.JointIKSpline(i),res.time,1);
end

PowerExo=zeros(length(res.time),length(auxdata.IndExo));
for dof = 1:auxdata.Ndof    
    if any(dof == auxdata.IndExo)
        iExo = dof == auxdata.IndExo;
        Te = Texo(:,iExo);
        PowerExo(:,iExo) = Te .* qdot(:,dof);
    end
end



% compute muscle power
MusclePower = vM .* TForce .* -1;

exc         = a;
act         = a;
vMtilde_E   = vM./lMo;
musclemass  = massM;
pctst       = ones(nColl,1)*auxdata.ST_ratio;    % update this metric
vcemax      = 10.*lMo;
Fiso        = FMltilde;
b           = auxdata.b_Metab;

[energy_total] = ...
    getMetabolicEnergySmooth2016all_vect(exc,act,lMtilde,vMtilde_E,vM,Fce, ...
    musclemass,pctst,vcemax,Fiso, b);

ResT= RActivation.*auxdata.Topt_res;

% Compute energy efficiency exoskeleton ?

% compute postive mechanical work
ExoPosWork=zeros(1,auxdata.nExo);
ExoNetWork=zeros(1,auxdata.nExo);
for i=1:auxdata.nExo
    Psel=PowerExo(:,i);
    Psel(Psel<0)=0;
    ExoPosWork(i)=trapz(Time,Psel);
    ExoNetWork(i)=trapz(Time,PowerExo(:,i));
end

