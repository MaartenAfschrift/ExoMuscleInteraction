%% Find optimal exo control for a more complex model
%---------------------------------------------------

clear all; close all; clc;

%% path information

MainDir     = 'C:\Users\u0088756\Documents\PostDoc\Software\ExoSimulation\BenchMarkTest';
Datapath    = fullfile(MainDir,'Data','Gait92Model');
S.IK_path   = fullfile(Datapath,'KS_Refwalk.mot');
S.ID_path   = fullfile(Datapath,'ID_RefWalk.sto');
S.model_path= fullfile(Datapath,'scaled_model_marker.osim');
load(fullfile(Datapath,'RefWalk.mat'));
S.time      = [RefWalk.Event.RHS_COP(10) RefWalk.Event.RHS_COP(10+1)];     % two heelstrikes
S.OutPath   = fullfile(Datapath,'EvaluateAFO_results');

%% Additional software
% TO Run this example, you have to add the project on solving the muscle
% redundancy problem and metabolic energy consumptions to you rmatlab path

% Solve muscle redundancy (De Groote 2016): https://github.com/antoinefalisse/solvemuscleredundancy_dev
addpath(genpath('C:\Users\u0088756\Documents\GitProjects\solvemuscleredundancy'));
% Computation metabolic energy: https://github.com/MaartenAfschrift/MetabolicEnergy_Simulation
addpath(genpath('C:\Users\u0088756\Documents\GitProjects\MetabolicEnergy\MetabolicEnergy\Models'));

%% Input information
Misc.MuscleNames_Input={};      % Selects all muscles for the Input DOFS when this is left empty.
Misc.DofNames_Input={'ankle_angle_r','knee_angle_r','hip_flexion_r','hip_rotation_r','hip_adduction_r'};    % dof for solving muscl redunancy
S.nDof = length(Misc.DofNames_Input);

Misc.f_cutoff_IK = 6;   Misc.f_cutoff_ID=6;
Misc.f_order_ID=6;      Misc.f_cutoff_lMT=6;
Misc.f_order_lMT=6;     Misc.f_cutoff_dM=6;
Misc.f_order_dM=6;      Misc.f_cutoff_IK=6;
Misc.f_order_IK=6;      Misc.Mesh_Frequency=100;

NMuscles = 43;
MuscleInds_S =32:34;    S.MuscleInds_S=MuscleInds_S;

% Exoskeleton settings
S.N_exo_dof     = 3;                      % only ankle actuation
S.Texo          = [0 0 0.8*72];           % peak exo moment (Nm) (Zhang et al. 2017)
S.MaxTMult      = [ 1 1 0];               % for ankle joint, only plantarflexion assistance, no dorsiflexion
S.MinTMult      = [ -1 -1 -1];
S.MaxPower      = [200 200 200];          % peak exoskeleton power (W)
S.ExoDof        = {'knee_angle_r','hip_flexion_r','ankle_angle_r'};
S.ID_rel        = [0 0 0];                    % S.ID_rel = percentage of ID torque generated by exo

% weights in objective function
auxdata.w0 = 1;      % weight on activations
auxdata.w1 = 100;    % weight on reserve actuators
auxdata.w2 = 0.1;    % weight on vA
auxdata.w3 = 0;      % weight on metabolic energy

% musculo-tendon settings
S.ATendon               = ones(1,NMuscles)*35;
S.ATendon(MuscleInds_S) = 10;
S.Topt_res              = 1;

S.CreateAdigatorFiles = 1;      % create new adigator files for the continuous and endpoint function ?
S.RunMuscleAnalysis   = 0;      % Run muscle analysis (again ?)

% settings for metabolic energy (update read this from files using Antoine his function)
S.ST_ratio = [];%[0.54 0.53 0.55 0.5 0.38 0.50 0.56 0.80 0.7];  % the 18m model
S.tension  = [];%[0.62 1    0.75 1.5 0.75 0.50 0.69 0.62 0.75]; % the 18m model
S.b_Metab  = 10;


% formulate NLP
[setup,DatStore] = nExo_Sim_Batch_Setup(S,auxdata,Misc);

% adjust tendon stiffness to values from literature
setup.auxdata.ATendon(MuscleInds_S) = 15;     % set tendon stiffness to 15 (value from literature)


nSim=4;     % (1) optimal, (2) assistive , (3) resistive, (4) unpowered



%% Simulate optimal control AFO
setup.auxdata.ID_rel                = [0 0 0];
setup.auxdata.Texo                  = [0 0 40];

% Solve NLP
[res,Texo,TID,MusclePower,lMtilde,MActivation,lTtilde,energy_total,~,~,~,ExoPosWork,ExoNetWork] = nExo_Sim_Batch_Run(setup,DatStore);
IndSim=1;

% Pre allocate output variables
nColl       = length(res.time);
Texo_Vect   = zeros(nColl,S.N_exo_dof,nSim);
TID_Vect    = zeros(nColl,S.nDof,nSim);
MusclePower_Vect=zeros(nColl,NMuscles,nSim);
lMtilde_Vect = zeros(nColl,NMuscles,nSim);
MActivation_Vect=zeros(nColl,NMuscles,nSim);
lTtilde_Vect=zeros(nColl,NMuscles,nSim);
E_Vect      =zeros(nColl,NMuscles,nSim);
Work_Vect   = zeros(S.N_exo_dof,nSim);
PosWork_Vect   = zeros(S.N_exo_dof,nSim);

% store output
Texo_Vect(:,:,IndSim)=Texo;                 TID_Vect(:,:,IndSim)=TID;
MusclePower_Vect(:,:,IndSim)=MusclePower;   lMtilde_Vect(:,:,IndSim)=lMtilde;
MActivation_Vect(:,:,IndSim)=MActivation;   lTtilde_Vect(:,:,IndSim)=lTtilde;
Work_Vect(:,IndSim)=ExoNetWork;             PosWork_Vect(:,IndSim)=ExoPosWork;
E_Vect(:,:,IndSim)=energy_total;

%% Simulate ID control assistive
setup.auxdata.ID_rel                = [0 0 0.3];        % 30 p ID assistance
setup.auxdata.Texo                  = [0 0 0];

% Solve NLP
[res,Texo,TID,MusclePower,lMtilde,MActivation,lTtilde,energy_total,~,~,~,ExoPosWork,ExoNetWork] = nExo_Sim_Batch_Run(setup,DatStore);
IndSim=2;

Texo_Vect(:,:,IndSim)=Texo;                 TID_Vect(:,:,IndSim)=TID;
MusclePower_Vect(:,:,IndSim)=MusclePower;   lMtilde_Vect(:,:,IndSim)=lMtilde;
MActivation_Vect(:,:,IndSim)=MActivation;   lTtilde_Vect(:,:,IndSim)=lTtilde;
Work_Vect(:,IndSim)=ExoNetWork;             PosWork_Vect(:,IndSim)=ExoPosWork;
E_Vect(:,:,IndSim)=energy_total;

%% Simulate ID control resistance
setup.auxdata.ID_rel                = [0 0 -0.1];       % -10 p ID resistance 
setup.auxdata.Texo                  = [0 0 0];

[res,Texo,TID,MusclePower,lMtilde,MActivation,lTtilde,energy_total,~,~,~,ExoPosWork,ExoNetWork] = nExo_Sim_Batch_Run(setup,DatStore);
IndSim=3;

Texo_Vect(:,:,IndSim)=Texo;                 TID_Vect(:,:,IndSim)=TID;
MusclePower_Vect(:,:,IndSim)=MusclePower;   lMtilde_Vect(:,:,IndSim)=lMtilde;
MActivation_Vect(:,:,IndSim)=MActivation;   lTtilde_Vect(:,:,IndSim)=lTtilde;
Work_Vect(:,IndSim)=ExoNetWork;             PosWork_Vect(:,IndSim)=ExoPosWork;
E_Vect(:,:,IndSim)=energy_total;

%% Simulate without exoskeleton
setup.auxdata.ID_rel                = [0 0 0];       % -10 p ID resistance 
setup.auxdata.Texo                  = [0 0 0];

[res,Texo,TID,MusclePower,lMtilde,MActivation,lTtilde,energy_total,~,~,~,ExoPosWork,ExoNetWork] = nExo_Sim_Batch_Run(setup,DatStore);
IndSim=4;

Texo_Vect(:,:,IndSim)=Texo;                 TID_Vect(:,:,IndSim)=TID;
MusclePower_Vect(:,:,IndSim)=MusclePower;   lMtilde_Vect(:,:,IndSim)=lMtilde;
MActivation_Vect(:,:,IndSim)=MActivation;   lTtilde_Vect(:,:,IndSim)=lTtilde;
Work_Vect(:,IndSim)=ExoNetWork;             PosWork_Vect(:,IndSim)=ExoPosWork;
E_Vect(:,:,IndSim)=energy_total;


save(fullfile(S.OutPath,'EvaluateAFO2.mat'),'S','Misc','auxdata','Texo_Vect','TID_Vect','MusclePower_Vect',...
    'lMtilde_Vect','MActivation_Vect','lTtilde_Vect','Work_Vect','PosWork_Vect','E_Vect',...
    'res','DatStore','setup');
